{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/components/table-cell/default-test.js","dummy/tests/integration/components/table-header/default-test.js","dummy/tests/integration/components/table-header/translatable-test.js","dummy/tests/integration/components/ui-table-test.js","dummy/tests/integration/components/ui-tbody-test.js","dummy/tests/integration/components/ui-tfoot-test.js","dummy/tests/integration/components/ui-thead-test.js","dummy/tests/integration/components/ui-tr-test.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","dummy/tests/unit/classes/column-test.js","dummy/tests/unit/classes/row-test.js","dummy/tests/unit/classes/table-test.js","dummy/tests/unit/mixins/cell-alignment-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/basic-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/basic-table.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/custom-types.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/custom-types.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/editable-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/editable-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ember-data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ember-data.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/expanded-profile-row.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/expanded-profile-row.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/expanded-row-example.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/expanded-row-example.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/interactive-ember-data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/interactive-ember-data.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/table-cell/editable.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/table-cell/editable.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/table-cell/email.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/table-cell/email.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/table-cell/expand-row.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/table-cell/expand-row.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/table-header/custom.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/table-header/custom.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/table-pagination.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/table-pagination.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/translatable-header.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/translatable-header.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/custom-types.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/custom-types.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/editable.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/editable.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-data-interactive.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-data-interactive.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/ember-data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-data.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/expanded-row.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/expanded-row.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/translatable-header.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/translatable-header.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('formats.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'formats.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/columns.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/columns.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/ember-data-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/ember-data-table.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/person.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/person.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/custom-types.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/custom-types.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/editable.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/editable.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-data-interactive.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-data-interactive.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/ember-data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-data.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/expanded-row.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/expanded-row.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/translatable-header.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/translatable-header.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n    server.shutdown();\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  var _slice = Array.prototype.slice;\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          var _options$beforeEach;\n\n          return (_options$beforeEach = options.beforeEach).call.apply(_options$beforeEach, [this].concat(_slice.call(arguments)));\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _options$afterEach,\n            _this = this;\n\n        var afterEach = options.afterEach && (_options$afterEach = options.afterEach).call.apply(_options$afterEach, [this].concat(_slice.call(arguments)));\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _dummyTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    // use defaults, but you can override\n    var attributes = _ember['default'].assign({}, _dummyConfigEnvironment['default'].APP, attrs);\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/integration/components/table-cell/default-test', ['exports', 'ember-qunit', 'ember-semantic-ui-table/classes/column'], function (exports, _emberQunit, _emberSemanticUiTableClassesColumn) {\n\n  (0, _emberQunit.moduleForComponent)('table-cell/default', 'Integration | Component | table cell/default', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('tag name is td', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'IqO/fAqA',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"table-cell/default\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('td').length);\n  });\n\n  (0, _emberQunit.test)('collapsing column has class `collapsing`', function (assert) {\n    assert.expect(1);\n\n    this.set('column', new _emberSemanticUiTableClassesColumn['default']({ collapsing: true }));\n    this.render(Ember.HTMLBars.template({\n      'id': '3IPBb47D',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"table-cell/default\"],null,[[\"column\"],[[\"get\",[\"column\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('td').hasClass('collapsing'));\n  });\n});","define('dummy/tests/integration/components/table-header/default-test', ['exports', 'ember-qunit', 'ember-semantic-ui-table/classes/column'], function (exports, _emberQunit, _emberSemanticUiTableClassesColumn) {\n\n  (0, _emberQunit.moduleForComponent)('table-header/default', 'Integration | Component | table header/default', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('tag name is th', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      'id': '7QZ+8Bak',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"table-header/default\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('th').length);\n  });\n\n  (0, _emberQunit.test)('sortable column has class `sortable`', function (assert) {\n    assert.expect(1);\n\n    this.set('column', new _emberSemanticUiTableClassesColumn['default']({ sortable: true }));\n    this.render(Ember.HTMLBars.template({\n      'id': 'ynTQBNv/',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"table-header/default\"],null,[[\"column\"],[[\"get\",[\"column\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('th').hasClass('sortable'));\n  });\n\n  (0, _emberQunit.test)('sorted column has class `sorted`', function (assert) {\n    assert.expect(1);\n\n    this.set('column', new _emberSemanticUiTableClassesColumn['default']({ sorted: true }));\n    this.render(Ember.HTMLBars.template({\n      'id': 'ynTQBNv/',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"table-header/default\"],null,[[\"column\"],[[\"get\",[\"column\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('th').hasClass('sorted'));\n  });\n\n  (0, _emberQunit.test)('collapsing column has class `collapsing`', function (assert) {\n    assert.expect(1);\n\n    this.set('column', new _emberSemanticUiTableClassesColumn['default']({ collapsing: true }));\n    this.render(Ember.HTMLBars.template({\n      'id': 'ynTQBNv/',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"table-header/default\"],null,[[\"column\"],[[\"get\",[\"column\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('th').hasClass('collapsing'));\n  });\n});","define('dummy/tests/integration/components/table-header/translatable-test', ['exports', 'ember-qunit', 'ember-test-helpers/wait', 'ember-semantic-ui-table/classes/column'], function (exports, _emberQunit, _emberTestHelpersWait, _emberSemanticUiTableClassesColumn) {\n\n  var service = undefined;\n\n  (0, _emberQunit.moduleForComponent)('table-header/translatable', 'Integration | Component | table header/translatable', {\n    integration: true,\n    setup: function setup() {\n      service = this.container.lookup('service:intl');\n      service.setLocale('en-us');\n    }\n  });\n\n  (0, _emberQunit.test)('header label is translated', function (assert) {\n    var _this = this;\n\n    assert.expect(1);\n\n    this.set('column', new _emberSemanticUiTableClassesColumn['default']({ label: 'labels.first_name' }));\n    this.render(Ember.HTMLBars.template({\n      'id': 'q1uGMv+q',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"table-header/translatable\"],null,[[\"column\"],[[\"get\",[\"column\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal(_this.$().text().trim(), 'First Name');\n    });\n  });\n});","define('dummy/tests/integration/components/ui-table-test', ['exports', 'ember-qunit', 'ember-semantic-ui-table/classes/table'], function (exports, _emberQunit, _emberSemanticUiTableClassesTable) {\n\n  (0, _emberQunit.moduleForComponent)('ui-table', 'Integration | Component | ui table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('tag name is table', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'Rujj/KH4',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"ui-table\"],[[\"get\",[\"table\"]]],null],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('table').length);\n  });\n\n  (0, _emberQunit.test)('single line table has class `single line`', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'NZBPnHFW',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"ui-table\"],[[\"get\",[\"table\"]]],[[\"singleLine\"],[true]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('table').hasClass('single line'));\n  });\n\n  (0, _emberQunit.test)('sortable table has class `sortable`', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'eS/3MXZt',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"ui-table\"],[[\"get\",[\"table\"]]],[[\"sortable\"],[true]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('table').hasClass('sortable'));\n  });\n\n  (0, _emberQunit.test)('not stackable table has class `unstackable`', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'rZ0qdNMw',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"ui-table\"],[[\"get\",[\"table\"]]],[[\"stacking\"],[false]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('table').hasClass('unstackable'));\n  });\n\n  (0, _emberQunit.test)('fixed table has class `fixed`', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'R+rpexO4',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"ui-table\"],[[\"get\",[\"table\"]]],[[\"fixed\"],[true]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('table').hasClass('fixed'));\n  });\n\n  (0, _emberQunit.test)('striped table has class `striped`', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'HWDTJfNv',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"ui-table\"],[[\"get\",[\"table\"]]],[[\"striped\"],[true]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('table').hasClass('striped'));\n  });\n\n  (0, _emberQunit.test)('celled table has class `celled`', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'PN/pPsLZ',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"ui-table\"],[[\"get\",[\"table\"]]],[[\"celled\"],[true]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('table').hasClass('celled'));\n  });\n\n  (0, _emberQunit.test)('padded table has class `padded`', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'zCDOBIJ2',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"ui-table\"],[[\"get\",[\"table\"]]],[[\"padded\"],[true]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('table').hasClass('padded'));\n  });\n\n  (0, _emberQunit.test)('compact table has class `compact`', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'Y1/1fsUZ',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"ui-table\"],[[\"get\",[\"table\"]]],[[\"compact\"],[true]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('table').hasClass('compact'));\n  });\n\n  (0, _emberQunit.test)('small table has class `small`', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'PX8BxcdB',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"ui-table\"],[[\"get\",[\"table\"]]],[[\"size\"],[\"small\"]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('table').hasClass('small'));\n  });\n\n  (0, _emberQunit.test)('large table has class `large`', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'vJXIRiR2',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"ui-table\"],[[\"get\",[\"table\"]]],[[\"size\"],[\"large\"]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('table').hasClass('large'));\n  });\n\n  (0, _emberQunit.test)('table with row selection enabled has class `selectable`', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'oREkhX3d',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"ui-table\"],[[\"get\",[\"table\"]]],[[\"rowSelection\"],[true]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('table').hasClass('selectable'));\n  });\n});","define('dummy/tests/integration/components/ui-tbody-test', ['exports', 'ember-qunit', 'ember-semantic-ui-table/classes/table'], function (exports, _emberQunit, _emberSemanticUiTableClassesTable) {\n\n  (0, _emberQunit.moduleForComponent)('ui-tbody', 'Integration | Component | ui tbody', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('tag name is tbody', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'NLcOdTM+',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ui-tbody\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('tbody').length);\n  });\n\n  (0, _emberQunit.test)('it renders rows in the table', function (assert) {\n    assert.expect(3);\n\n    var columns = [{ label: 'Column', valuePath: 'text' }];\n    var rows = [{ text: 'This is a test' }];\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default'](columns, rows));\n    this.render(Ember.HTMLBars.template({\n      'id': 'F05RC01P',\n      'block': '{\"statements\":[[\"block\",[\"ui-tbody\"],null,[[\"table\"],[[\"get\",[\"table\"]]]],0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"Table is empty\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$('tr').length, 1);\n    assert.equal(this.$('tr td').length, 1);\n    assert.equal(this.$('tr td').text().trim(), 'This is a test');\n  });\n\n  (0, _emberQunit.test)('it renders block content when table is empty', function (assert) {\n    assert.expect(1);\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default']());\n    this.render(Ember.HTMLBars.template({\n      'id': 'F05RC01P',\n      'block': '{\"statements\":[[\"block\",[\"ui-tbody\"],null,[[\"table\"],[[\"get\",[\"table\"]]]],0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"Table is empty\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$('').text().trim(), 'Table is empty');\n  });\n\n  (0, _emberQunit.test)('it renders expanded row component when row is expanded', function (assert) {\n    assert.expect(2);\n\n    var columns = [{ label: 'Column', valuePath: 'text' }];\n    var rows = [{ text: 'This is a test' }];\n\n    this.set('table', new _emberSemanticUiTableClassesTable['default'](columns, rows));\n    this.render(Ember.HTMLBars.template({\n      'id': 'qIVK0yi2',\n      'block': '{\"statements\":[[\"block\",[\"ui-tbody\"],null,[[\"table\",\"expandedRowComponent\"],[[\"get\",[\"table\"]],\"expanded-profile-row\"]],0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$('tr').length, 1);\n\n    this.set('table.rows.firstObject.expanded', true);\n    assert.equal(this.$('tr').length, 2);\n  });\n});","define('dummy/tests/integration/components/ui-tfoot-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ui-tfoot', 'Integration | Component | ui tfoot', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('tag name is tfoot', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'yd/v7vVN',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ui-tfoot\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('tfoot').length);\n  });\n\n  (0, _emberQunit.test)('footer content is rendered', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'gRilKVKN',\n      'block': '{\"statements\":[[\"block\",[\"ui-tfoot\"],null,null,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"footer content\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'footer content');\n  });\n});","define('dummy/tests/integration/components/ui-thead-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ui-thead', 'Integration | Component | ui thead', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('tag name is thead', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'g/JMKWSw',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ui-thead\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('thead').length);\n  });\n});","define('dummy/tests/integration/components/ui-tr-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ui-tr', 'Integration | Component | ui tr', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('tag name is tr', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'FKduB7/G',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"ui-tr\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.ok(this.$('tr').length);\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/tests.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/table-cell/default-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/table-cell/default-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/table-header/default-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/table-header/default-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/table-header/translatable-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/table-header/translatable-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ui-table-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ui-table-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ui-tbody-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ui-tbody-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ui-tfoot-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ui-tfoot-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ui-thead-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ui-thead-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ui-tr-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ui-tr-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/classes/column-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/classes/column-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/classes/row-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/classes/row-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/classes/table-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/classes/table-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/cell-alignment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/cell-alignment-test.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/unit/classes/column-test', ['exports', 'ember-semantic-ui-table/classes/column', 'qunit'], function (exports, _emberSemanticUiTableClassesColumn, _qunit) {\n\n  (0, _qunit.module)('Unit | Classes | column');\n\n  (0, _qunit.test)('setting `visible` should change `hidden`', function (assert) {\n    assert.expect(4);\n\n    var column = _emberSemanticUiTableClassesColumn['default'].create();\n    assert.ok(column.get('visible'), 'Column is visible');\n    assert.notOk(column.get('hidden'), 'Column is not hidden');\n\n    column.set('visible', false);\n    assert.notOk(column.get('visible'), 'Column is not visible');\n    assert.ok(column.get('hidden'), 'Column is hidden');\n  });\n});","define('dummy/tests/unit/classes/row-test', ['exports', 'ember-semantic-ui-table/classes/row', 'qunit'], function (exports, _emberSemanticUiTableClassesRow, _qunit) {\n\n  (0, _qunit.module)('Unit | Classes | row');\n\n  (0, _qunit.test)('options passed to create should be set on object', function (assert) {\n    assert.expect(1);\n\n    var content = {};\n    var row = _emberSemanticUiTableClassesRow['default'].create(content, { selected: true });\n\n    assert.ok(row.get('selected'));\n  });\n\n  (0, _qunit.test)('content should be proxied to row object', function (assert) {\n    assert.expect(1);\n\n    var content = { foo: 'bar' };\n    var row = _emberSemanticUiTableClassesRow['default'].create(content);\n\n    assert.equal(row.get('foo'), 'bar');\n  });\n});","define('dummy/tests/unit/classes/table-test', ['exports', 'ember-semantic-ui-table/classes/table', 'ember-semantic-ui-table/classes/column', 'ember-semantic-ui-table/classes/row', 'qunit'], function (exports, _emberSemanticUiTableClassesTable, _emberSemanticUiTableClassesColumn, _emberSemanticUiTableClassesRow, _qunit) {\n\n  (0, _qunit.module)('Unit | Classes | table');\n\n  (0, _qunit.test)('Column instances are created when passed plain objects to table constructor', function (assert) {\n    assert.expect(2);\n\n    var table = new _emberSemanticUiTableClassesTable['default']([{\n      label: 'Column',\n      valuePath: 'value'\n    }]);\n\n    var column = table.get('columns.firstObject');\n    assert.ok(column instanceof _emberSemanticUiTableClassesColumn['default']);\n    assert.equal('Column', column.get('label'));\n  });\n\n  (0, _qunit.test)('should not create a new Column object if a Column instance is provided', function (assert) {\n    assert.expect(2);\n\n    var table = new _emberSemanticUiTableClassesTable['default']([_emberSemanticUiTableClassesColumn['default'].create({ label: 'Column' })]);\n\n    var column = table.get('columns.firstObject');\n    assert.ok(column instanceof _emberSemanticUiTableClassesColumn['default']);\n    assert.notOk(column.get('content') instanceof _emberSemanticUiTableClassesColumn['default']);\n  });\n\n  (0, _qunit.test)('Row instances are created when passed plain objects to table constructor', function (assert) {\n    assert.expect(2);\n\n    var table = new _emberSemanticUiTableClassesTable['default']([], [{ foo: 'bar' }]);\n\n    var row = table.get('rows.firstObject');\n    assert.ok(row instanceof _emberSemanticUiTableClassesRow['default']);\n    assert.equal('bar', row.get('foo'));\n  });\n\n  (0, _qunit.test)('should not create a new Row object if a Row instance is provided', function (assert) {\n    assert.expect(2);\n\n    var table = new _emberSemanticUiTableClassesTable['default']([], [_emberSemanticUiTableClassesRow['default'].create({ foo: 'bar' })]);\n\n    var row = table.get('rows.firstObject');\n    assert.ok(row instanceof _emberSemanticUiTableClassesRow['default']);\n    assert.notOk(row.get('content') instanceof _emberSemanticUiTableClassesRow['default']);\n  });\n});","define('dummy/tests/unit/mixins/cell-alignment-test', ['exports', 'ember', 'ember-semantic-ui-table/mixins/cell-alignment', 'ember-semantic-ui-table/classes/column', 'qunit'], function (exports, _ember, _emberSemanticUiTableMixinsCellAlignment, _emberSemanticUiTableClassesColumn, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | cell alignment');\n\n  (0, _qunit.test)('text alignment class is correct', function (assert) {\n    var column = _emberSemanticUiTableClassesColumn['default'].create({ align: 'center' });\n    var CellAlignmentObject = _ember['default'].Object.extend(_emberSemanticUiTableMixinsCellAlignment['default']);\n    var subject = CellAlignmentObject.create({ column: column });\n\n    assert.equal(subject.get('alignClass'), 'center aligned');\n  });\n\n  (0, _qunit.test)('vertical alignment class is correct', function (assert) {\n    var column = _emberSemanticUiTableClassesColumn['default'].create({ verticalAlign: 'bottom' });\n    var CellAlignmentObject = _ember['default'].Object.extend(_emberSemanticUiTableMixinsCellAlignment['default']);\n    var subject = CellAlignmentObject.create({ column: column });\n\n    assert.equal(subject.get('verticalAlignClass'), 'bottom aligned');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingsvLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}